; NOTE: Assertions have been autogenerated by utils/update_test_checks.py UTC_ARGS: --version 2
; Fifth example from Doc/Coroutines.rst (final suspend)
; RUN: opt < %s -aa-pipeline=basic-aa -passes='default<O2>' -preserve-alignment-assumptions-during-inlining=false -S | FileCheck %s

define ptr @f(i32 %n) presplitcoroutine {
; CHECK-LABEL: define noalias nonnull ptr @f
; CHECK-SAME: (i32 [[N:%.*]]) local_unnamed_addr {
; CHECK-NEXT:  while.cond:
; CHECK-NEXT:    [[ALLOC:%.*]] = tail call ptr @malloc(i32 24)
; CHECK-NEXT:    store ptr @f.resume, ptr [[ALLOC]], align 8
; CHECK-NEXT:    [[DESTROY_ADDR:%.*]] = getelementptr inbounds [[F_FRAME:%.*]], ptr [[ALLOC]], i64 0, i32 1
; CHECK-NEXT:    store ptr @f.destroy, ptr [[DESTROY_ADDR]], align 8
; CHECK-NEXT:    [[N_VAL_SPILL_ADDR:%.*]] = getelementptr inbounds [[F_FRAME]], ptr [[ALLOC]], i64 0, i32 2
; CHECK-NEXT:    store i32 [[N]], ptr [[N_VAL_SPILL_ADDR]], align 4
; CHECK-NEXT:    [[CMP:%.*]] = icmp sgt i32 [[N]], 0
; CHECK-NEXT:    br i1 [[CMP]], label [[AFTERCOROSUSPEND:%.*]], label [[AFTERCOROSUSPEND3:%.*]]
; CHECK:       AfterCoroSuspend:
; CHECK-NEXT:    tail call void @print(i32 [[N]])
; CHECK-NEXT:    [[INDEX_ADDR5:%.*]] = getelementptr inbounds [[F_FRAME]], ptr [[ALLOC]], i64 0, i32 3
; CHECK-NEXT:    store i1 false, ptr [[INDEX_ADDR5]], align 1
; CHECK-NEXT:    br label [[AFTERCOROEND:%.*]]
; CHECK:       AfterCoroSuspend3:
; CHECK-NEXT:    store ptr null, ptr [[ALLOC]], align 8
; CHECK-NEXT:    br label [[AFTERCOROEND]]
; CHECK:       AfterCoroEnd:
; CHECK-NEXT:    ret ptr [[ALLOC]]
;
entry:
  %id = call token @llvm.coro.id(i32 0, ptr null, ptr null, ptr null)
  %size = call i32 @llvm.coro.size.i32()
  %alloc = call ptr @malloc(i32 %size)
  %hdl = call noalias ptr @llvm.coro.begin(token %id, ptr %alloc)
  br label %while.cond
while.cond:
  %n.val = phi i32 [ %n, %entry ], [ %dec, %while.body ]
  %cmp = icmp sgt i32 %n.val, 0
  br i1 %cmp, label %while.body, label %while.end

while.body:
  %dec = add nsw i32 %n.val, -1
  call void @print(i32 %n.val) #4
  %s = call i8 @llvm.coro.suspend(token none, i1 false)
  switch i8 %s, label %suspend [i8 0, label %while.cond
  i8 1, label %cleanup]
while.end:
  %s.final = call i8 @llvm.coro.suspend(token none, i1 true)
  switch i8 %s.final, label %suspend [i8 0, label %trap
  i8 1, label %cleanup]
trap:
  call void @llvm.trap()
  unreachable
cleanup:
  %mem = call ptr @llvm.coro.free(token %id, ptr %hdl)
  call void @free(ptr %mem)
  br label %suspend
suspend:
  call i1 @llvm.coro.end(ptr %hdl, i1 false)
  ret ptr %hdl
}

declare noalias ptr @malloc(i32)
declare void @print(i32)
declare void @llvm.trap()
declare void @free(ptr nocapture)

declare token @llvm.coro.id( i32, ptr, ptr, ptr)
declare i32 @llvm.coro.size.i32()
declare ptr @llvm.coro.begin(token, ptr)
declare token @llvm.coro.save(ptr)
declare i8 @llvm.coro.suspend(token, i1)
declare ptr @llvm.coro.free(token, ptr)
declare i1 @llvm.coro.end(ptr, i1)

define i32 @main() {
; CHECK-LABEL: define i32 @main() local_unnamed_addr {
; CHECK-NEXT:  end:
; CHECK-NEXT:    [[ALLOC_I:%.*]] = tail call ptr @malloc(i32 24)
; CHECK-NEXT:    tail call void @print(i32 4)
; CHECK-NEXT:    tail call void @print(i32 3)
; CHECK-NEXT:    tail call void @print(i32 2)
; CHECK-NEXT:    tail call void @print(i32 1)
; CHECK-NEXT:    tail call void @free(ptr nonnull [[ALLOC_I]])
; CHECK-NEXT:    ret i32 0
;
entry:
  %hdl = call ptr @f(i32 4)
  br label %while
while:
  call void @llvm.coro.resume(ptr %hdl)
  %done = call i1 @llvm.coro.done(ptr %hdl)
  br i1 %done, label %end, label %while
end:
  call void @llvm.coro.destroy(ptr %hdl)
  ret i32 0

}

declare i1 @llvm.coro.done(ptr)
declare void @llvm.coro.resume(ptr)
declare void @llvm.coro.destroy(ptr)
